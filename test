from flask import Flask, jsonify, request, render_template
import pymysql

app = Flask(__name__)

# Configuración de la conexión persistente a la base de datos
connection = pymysql.connect(
    host='instancia-db-iot.cfa0mqyweqgo.us-east-1.rds.amazonaws.com',
    user='admin',
    password='Admin12345#!',
    db='db_iot',
    cursorclass=pymysql.cursors.DictCursor,
    autocommit=True  # Habilita autocommit para evitar cierres de conexión manuales
)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/items', methods=['POST'])
def create_item():
    try:
        data = request.json
        ip_cliente = request.headers.get('X-Forwarded-For', request.remote_addr)

        with connection.cursor() as cursor:
            sql = """
                INSERT INTO IoTCarStatus (status, ip_cliente, name, id_device)
                VALUES (%s, %s, %s, %s)
            """
            cursor.execute(sql, (data['status'], ip_cliente, data['name'], data['id_device']))
            return jsonify({"message": "Acción enviada correctamente"}), 201
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/items', methods=['GET'])
def get_items():
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM IoTCarStatus ORDER BY id DESC LIMIT 1")
            items = cursor.fetchall()
            return jsonify(items)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/Titems', methods=['GET'])
def get_items_api():
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM IoTCarStatus ORDER BY id DESC LIMIT 10")
            items = cursor.fetchall()
            return jsonify(items)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/monitor', methods=['GET'])
def get_monitor_items():
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM IoTCarStatus ORDER BY id DESC")
            items = cursor.fetchall()
            return render_template('monitor.html', items=items)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/latest-status', methods=['GET'])
def get_latest_status():
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT status FROM IoTCarStatus ORDER BY id DESC LIMIT 1")
            item = cursor.fetchone()
            return jsonify({"status": item["status"]} if item else {"status": None, "error": "No data found"}), 200
    except Exception as e:
        app.logger.error(f"Error al obtener el último estado: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/device-status', methods=['POST'])
def update_device_status():
    try:
        data = request.json
        id_device = data.get('id_device')
        statusonline = data.get('statusonline', 0)

        with connection.cursor() as cursor:
            sql = """
                INSERT INTO DeviceStatus (id_device, statusonline) 
                VALUES (%s, %s) 
                ON DUPLICATE KEY UPDATE statusonline = %s, last_update = CURRENT_TIMESTAMP;
            """
            cursor.execute(sql, (id_device, statusonline, statusonline))
        return jsonify({"message": "Estado de conexión actualizado correctamente"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/Device-conected', methods=['GET'])
def get_latest_device_status():
    try:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM DeviceStatus")
            item = cursor.fetchone()
            return jsonify(dict(item) if item else {"error": "No data found"}), 200
    except Exception as e:
        app.logger.error(f"Error al obtener el estado del dispositivo: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=True)
